#! stdtmpl
#
#template `%`(idx: expr): expr {.immediate.} =
#  row[idx]
#end template
#
#
#proc genThreadsList(c: var TForumData, count: var int): string =
#  const query = sql"select id, name, views, modified from thread order by modified desc limit ?, ?"
#  const threadId = 0
#  const name = 1
#  const views = 2
#  
#  result = ""
#  count = 0
<div id="talk-heads">
  <div class="topic"><div>Topic</div></div>
  <div class="users"><div>Users</div></div>
  <div class="detail"><div>Details</div></div>
  <div class="activity"><div>Activity</div></div>
</div>
<div id="talk-threads">
#  for row in rows(db, query, $((c.pageNum-1) * ThreadsPerPage), $ThreadsPerPage):
#  inc(count)
  <div>
    <div class="topic">
      <div>
        <a href="${c.genThreadUrl(threadid = %threadid)}"
           title="${xmlEncode(%name)}">${xmlEncode(%name)}</a>
        ${genPagenumLocalNav(c, (%threadid).parseInt)}
      </div>
    </div>

    #let users = getAllRows(db,
    #  sql("select distinct name, email from person where id in " & 
    #      "(select author from post where thread = ?)"), %threadId)
    <div class="users">
      <div>
        #for i in 0 .. min(6, users.len-1):
        <img src="${getGravatarUrl(users[i][1], 20)}" title="${users[i][0]}">
        #end for
      </div>
    </div>
    
    #let latestReplyAuthor = getValue(db, sql("select name from person where id = " &
    #  "(select author from post where id = " & 
    #  "(select max(id) from post where thread = ?))"), %threadId)

    #let replyProfileUrl = c.req.makeUri("profile/", false) &
    #  xmlEncode(latestReplyAuthor)

#    let posts = getValue(db, sql"select count(*) from post where thread = ?", %threadId)
    <div class="detail">
      <div><div title="Views">${xmlEncode(%views)}</div></div>
      <div><div title="Posts">$posts</div></div>
    </div>

    #let latestReplyDate = getValue(db, sql("SELECT strftime('%s', " &
    #  "(select creation from post where id = (select max(id) from post where thread = ?)))"), %threadId)
    #let timeStr = formatTimestamp(latestReplyDate.parseInt())
    <div class="activity">
      <div>$timeStr</div>
    </div>
  </div>
#  end for
</div>

#end proc
#
#
#proc genPostPreview(c: var TForumData, 
#                    title, content, author, date: string): string =
#  result = ""
<a name="preview"></a>
<table class="post">
  <tr>
    <th colspan="2">
      <span>${xmlEncode(title)}</span>
      <span style="float:right;">${xmlEncode(date)}</span>
    </th>
  </tr>
  <tr>
    <td class="left">
      <span>${xmlEncode(author)}</span>
    </td>
    <td class="content">
    #try:
      ${content.rstToHtml}
    #except EParseError:
    #  c.errorMsg = getCurrentExceptionMsg()
    #end
    </td>
  </tr>
</table>
#end proc
#
#
#proc genPostsList(c: var TForumData, threadId: string, count: var int): string =
#  const query = sql"""select p.id, u.name, p.header, p.content, p.creation, p.author, u.email from post p, 
#                      person u where u.id = p.author and p.thread = ? order by p.id limit ?, ?"""
#  const postId = 0
#  const userName = 1
#  const postHeader = 2
#  const postContent = 3
#  const postCreation = 4
#  const postAuthor = 5
#  const userEmail = 6
#  result = ""
#  count = 0
#  let posts = getAllRows(db, query, threadId, $((c.pageNum-1) * PostsPerPage), $PostsPerPage)
<div id="talk-head">
  <div class="info-post">
    <div>
      <a href="${c.req.makeUri("/")}"><b>forum index</b></a> &gt;
      <a href="${c.req.makeUri("/t/" & $threadId)}">${posts[0][postHeader]}</a>
    </div>
  </div>
</div>
<div id="talk-thread">
#  for row in posts:
#    inc(count)
  <div>
    <div class="author">
      <div>
        #let profileUrl = c.req.makeUri("profile/", false) & xmlEncode(%userName)
        <div class="avatar">${genGravatar(%userEmail)}</div>
        <a class="name" href="$profileUrl">${xmlEncode(%userName)}</a>
        #if c.userId == %postAuthor and c.currentPost.subject.len == 0:
          <hr/><a href="${c.genThreadUrl(%postId, "edit")}">Edit post</a>
        #elif c.isAdmin and c.currentPost.subject.len == 0:
          <hr/><a style="color: red;" href="${c.genThreadUrl(%postId, "edit")}">Edit post</a>
        #end if
      </div>
    </div>
    <div class="topic">
      <div>
        #try:
          ${(%postContent).rstToHtml}
        #except EParseError:
        #  c.errorMsg = getCurrentExceptionMsg()
        #end
        <span class="date">${xmlEncode(%postCreation)}</span>
      </div>
    </div>
  </div>
#  end for
</div>
#end proc
#
#
#proc genFormPost(c: var TForumData, action: string,
#                 topText, title, content: string, isEdit: bool): string =
#  result = ""
<br />
<a name="reply"></a>
<div id="replywrapper">
  <div id="talk-head">
    <div class="info-post">
      <div>
        $topText
      </div>
    </div>
  </div>
  <form action="${c.req.makeUri(action, false) & "#preview"}" method="POST">
    ${FieldValid(c, "subject", "Subject:")}
    ${TextWidget(c, "subject", title, maxlength=100)}
    <br />
    ${FieldValid(c, "content", "Content:")}<br />
    ${TextAreaWidget(c, "content", content, width=100, height=20)}<br />
    ${FormSession(c, action)}

  #  if isEdit:
    <input type="checkbox" name="delete" value="Delete">Delete Post<br />
  #  end if
    <br/>
    <input type="submit" name="previewBtn" value="Preview" />
    <input type="submit" name="postBtn" value="Submit" />
  
    <a href="http://nimrod-lang.org/rst.html">Syntax Cheatsheet</a>
  </form>
</div>
#end proc
#
#
#proc genFormRegister(c: var TForumData): string =
#  result = ""
<form action="${c.req.makeUri("/doregister", false)}" method="POST">
  <b>Register</b><br />
  <table border="0">
    <tr>
      <td>${FieldValid(c, "name", "Username:")}</td>
      <td>${TextWidget(c, "name", reuseText, maxlength=20)}</td>
    </tr>
    <tr>
      <td>${FieldValid(c, "new_password", "Password:")}</td>
      <td><input type="password" name="new_password" maxlength="20" /></td>
    </tr>
    <tr>
      <td>${FieldValid(c, "email", "E-Mail:")}</td>
      <td>${TextWidget(c, "email", reuseText, maxlength=30)}</td>
    </tr>
    <tr>
      <td>${FieldValid(c, "antibot", "What is " & antibot(c) & "?")}</td>
      <td>${TextWidget(c, "antibot", "", maxlength=4)}</td>
    </tr>
  </table>
  <input type="submit" value="Register">
</form>
#end proc
#
#proc genFormLogin(c: var TForumData): string =
#  result = ""
#  if not c.loggedIn:
  <form action="${c.req.makeUri("/dologin", false)}" method="POST">
  <table border="0">
    <tr><td>Username:</td><td>
    <input type="text" name="name" maxlength="20"></td></tr>
    <tr><td>Password:</td><td>
    <input type="password" name="password" maxlength="20"></td></tr>
  </table>
  <input type="submit" value="Login">
  </form>
  <span style="color:red">$c.loginErrorMsg</span>
#  else:
  <span style="color:red">You're already logged in!</span>
#  end if
#end proc
#
#
#proc genListOnline(c: var TForumData, stats: TForumStats): string =
#  result = ""
#  var active: seq[string] = @[]
#  for i in stats.activeUsers:
#    active.add(i.nick)
#  end for
#  let profileUrl = c.req.makeUri("profile/", false) &
#      xmlEncode(stats.newestMember.nick)
  <span class="forum-user-info" title="${active.join(", ")}">
    <b>${stats.activeUsers.len}</b> of <b>${stats.totalUsers}</b> users online</span> &nbsp;|&nbsp;
    <b>${stats.totalThreads}</b> threads &nbsp;|&nbsp; <b>${stats.totalPosts}</b> posts &nbsp;|&nbsp;
    newest member: <a href="$profileUrl">${stats.newestMember.nick}</a>
#end proc
